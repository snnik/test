{"version":3,"sources":["service/DataService.js","component/ListComponent.jsx","component/PostComponent.jsx","component/CreateComponent.jsx","component/ExampleApp.jsx","App.js","serviceWorker.js","index.js"],"names":["API_URL","axios","get","id","post","put","ListComponent","props","state","posts","message","refreshPosts","bind","updatePostClicked","addPostClicked","this","DataService","retrieveAllPosts","then","response","setState","data","history","push","className","map","key","toString","onClick","headline","tag","Component","PostComponent","match","params","onSubmit","handleChange","backClick","deletePostClicked","retrievePost","event","target","value","name","updatePost","preventDefault","deletePost","console","log","type","onChange","CreateComponent","createPost","ExampleApp","path","exact","component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c8981653.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst API_URL = 'http://127.0.0.1:8085';\n\nclass DataService {\n\n    retrieveAllPosts() {\n        return axios.get(`${API_URL}/`);\n    }\n\n    deletePost(id){\n        return axios.get(`${API_URL}/delete/${id}`);\n    }\n\n    retrievePost(id) {\n        return axios.get(`${API_URL}/post/${id}`);\n    }\n\n    updatePost(id, post) {\n        return axios.put(`${API_URL}/post/update/${id}`, post);\n    }\n  \n    createPost(post) {\n        return axios.post(`${API_URL}/add`, post);\n    }\n}\n\nexport default new DataService()","import React, { Component } from 'react';\nimport DataService from '../service/DataService';\n\nclass ListComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            posts: [],\n            message: null\n        }\n        this.refreshPosts = this.refreshPosts.bind(this);\n        this.updatePostClicked = this.updatePostClicked.bind(this);\n        this.addPostClicked = this.addPostClicked.bind(this);\n    }\n\n    componentDidMount() {\n        this.refreshPosts();\n    }\n\n    refreshPosts() {\n        DataService.retrieveAllPosts()//HARDCODED\n            .then(\n                response => {\n                    //console.log(response);\n                    this.setState({\n                        posts: response.data,\n                        message: null\n                    });\n                }\n            )\n    }\n\n    updatePostClicked(id) {\n        //console.log('update ' + id)\n        this.props.history.push(`/post/${id}`);\n    }\n\n    addPostClicked() {\n        //console.log('add ' + id)\n        this.props.history.push(`/post/create`);\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <h3>Все посты</h3>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    {\n                        this.state.posts.map(\n                            post =>\n                                <div className=\"card m-2\" key={post.id.toString()} onClick={() => this.updatePostClicked(post.id)}>\n                                    <div className=\"card-header\">\n                                        {post.headline}\n                                    </div>\n                                    <div className=\"card-body\">\n                                        <div className=\"row\"><p>{post.message}</p></div>\n                                        <div className=\"row\">\n\n                                        </div>\n                                    </div>\n                                    <div className=\"card-footer text-muted\">\n                                        {post.tag}\n                                    </div>\n                                </div>\n                        )\n                    }\n                    <div className=\"row\">\n                        <button className=\"btn btn-success\" onClick={this.addPostClicked}>Add</button>\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default ListComponent","import React, { Component } from 'react';\nimport DataService from '../service/DataService';\n\nclass PostComponent extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            id: this.props.match.params.id,\n            headline: '',\n            tag: '',\n            message: ''\n        };\n        this.onSubmit = this.onSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.backClick = this.backClick.bind(this);\n        this.deletePostClicked = this.deletePostClicked.bind(this);\n    }\n\n    componentDidMount(){\n        DataService.retrievePost(this.state.id)\n            .then(response => this.setState({\n                id: response.data.id,\n                headline: response.data.headline,\n                tag: response.data.tag,\n                message: response.data.message\n            }));\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({[name]: value});\n      }\n\n    onSubmit(event){\n        let post = {\n            id: this.state.id,\n            headline: this.state.headline,\n            tag: this.state.tag,\n            message: this.state.message\n        }\n        DataService.updatePost(this.state.id, post)\n                .then(() => this.props.history.push('/'))\n\n        event.preventDefault();\n    }\n\n    backClick(){\n        this.props.history.push('/');\n    }\n\n    deletePostClicked(id) {\n        DataService.deletePost(id)\n            .then(\n                response => {\n                    this.setState({ message: `Delete ${id}` });\n                    this.props.history.push('/');\n                }\n            )\n    }\n\n    render() {\n        //let { message, tag, headline, id } = this.state;\n        console.log(this.state);\n        return (\n            <div className=\"container\">\n                <h3>Post</h3>\n                <br/>\n                <div className=\"container\">\n                    <form onSubmit={this.onSubmit}>\n                        <div className=\"form-group\">\n                            <label>\n                                Тэг:\n                            </label>\n                            <input name = \"tag\" className=\"form-control\" type=\"text\" value={this.state.tag} onChange={this.handleChange} />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>\n                                Заголовок:\n                            </label>\n                            <input name = \"headline\" className=\"form-control\" type=\"text\" value={this.state.headline} onChange={this.handleChange} />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>\n                                Сообщение:\n                            </label>\n                            <textarea name = \"message\" className=\"form-control\" value={this.state.message} onChange={this.handleChange} />\n                        </div>\n                        <div className=\"row\">\n                            <button className=\"btn btn-success mx-2\" onClick={this.backClick}>Назад</button>\n                            <button className=\"btn btn-warning float-right\" onClick={() => this.deletePostClicked(this.state.id)}>Удалить</button>\n                            <input className=\"btn btn-primary float-right mx-2\" type=\"submit\" value=\"Сохранить\" />\n                        </div>\n                    </form>\n                </div>\n                \n            </div>\n        );\n    }\n}\n\nexport default PostComponent;","import React, { Component } from 'react';\nimport DataService from '../service/DataService';\n\nclass CreateComponent extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            headline: '',\n            tag: '',\n            message: ''\n        };\n        this.onSubmit = this.onSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.backClick = this.backClick.bind(this);\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({[name]: value});\n      }\n\n    onSubmit(event){\n        let post = {\n            headline: this.state.headline,\n            tag: this.state.tag,\n            message: this.state.message\n        }\n        DataService.createPost(post)\n            .then(() => this.props.history.push('/'))\n        event.preventDefault();\n    }\n\n    backClick(){\n        this.props.history.push('/');\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <h3>Пост</h3>\n                <br/>\n                <div className=\"container\">\n                    <form onSubmit={this.onSubmit}>\n                        <div className=\"form-group\">\n                            <label>\n                                Тэг:\n                            </label>\n                            <input name = \"tag\" className=\"form-control\" type=\"text\" value={this.state.tag} onChange={this.handleChange} />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>\n                                Заголовок:\n                            </label>\n                            <input name = \"headline\" className=\"form-control\" type=\"text\" value={this.state.headline} onChange={this.handleChange} />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>\n                                Сообщение:\n                            </label>\n                            <textarea name = \"message\" className=\"form-control\" value={this.state.message} onChange={this.handleChange} />\n                        </div>\n                        <div className=\"row\">\n                            <button className=\"btn btn-success mx-2\" onClick={this.backClick}>Назад</button>\n                            <input className=\"btn btn-primary float-right mx-2\" type=\"submit\" value=\"Сохранить\" />\n                        </div>\n                    </form>\n                </div>\n                \n            </div>\n        );\n    }\n}\n\n\nexport default CreateComponent;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport ListComponent from './ListComponent';\nimport PostComponent from './PostComponent';\nimport CreateComponent from './CreateComponent';\n\nclass ExampleApp extends Component {\n    render() {\n        return (\n            <Router>\n                <div className=\"container\">\n                    <h1>Пример блога</h1>\n                    <h2>Редактирование и список</h2>\n                    <Switch>\n                        <Route path=\"/\" exact component={ListComponent} />\n                        <Route path=\"/post/create\" component={CreateComponent} />\n                        <Route path=\"/post/:id\" component={PostComponent} />\n                    </Switch>\n                </div>\n            </Router>\n        )\n    }\n}\n\nexport default ExampleApp","import React, { Component } from 'react';\nimport './App.css';\nimport ExampleApp from './component/ExampleApp';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <ExampleApp />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}